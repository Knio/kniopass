import kniopass

SALT = b'12345678901234567890123456789012'
PASSWORD = 'hunter42'

def test_compute_key():
    key = kniopass.KnioPass.compute_key_v1(SALT, PASSWORD)
    assert key == (
        b'\xeb\x29\x69\x96\xf9\xa5\xca\x04\xe3\x16\xa4\x6e'
        b'\xa7\x96\x81\x06\xe0\x62\xbb\x20\x54\x03\x07\x35'
        b'\xf1\xec\x3a\x7c\x63\x2f\xb2\x18\x49\x4b\x03\x64'
        b'\x56\x65\xec\x87\x13\x1c\x3d\x72\xdd\x7e\x8b\x4f'
        b'\xe1\xbf\xbc\xdf\x0f\x06\xe2\x47\x88\xb7\xb9\x8b'
        b'\x08\x1d\xda\x15\x8c\x61\xf3\x89\x4e\xe8\x1d\x5b'
        b'\xea\x6c\x72\x5f\x5f\x1e\x64\x1b'
    )

def test_encrypt_data():
    key = kniopass.KnioPass.compute_key_v1(SALT, PASSWORD)
    data = b'foobar asdasd kasdkljasdkl asjdkl asjdkla sjdl'
    ct = kniopass.KnioPass.encrypt_payload(key, SALT, data)
    ret = kniopass.KnioPass.decrypt_payload(PASSWORD, ct)
    assert data == ret['pt']
    assert key == ret['key']
    assert SALT == ret['salt']
    assert 1 == ret['version']

def test_password():
    password = kniopass.KnioPass.generate_password({'a', 'b'}, 'a')
    print(password)
    assert password.startswith('a')
    assert 'b' in password

def test_compat_v1():
    reference = (
        b'\x62\x6c\x6f\x62\x70\x61\x73\x73\x30\x30\x30\x30'
        b'\x30\x30\x30\x31\x1b\xa4\xfc\xfb\xac\x66\x83\xb3'
        b'\x63\xab\xd9\x3b\x92\x78\xc7\xdc\x6b\x6a\x35\x48'
        b'\x56\xd4\x88\xce\xe8\xe2\x82\xe4\xb5\xa9\x1e\xc5'
        b'\x26\x68\xa9\x1d\xdc\x22\xb1\x9f\x08\x62\x88\x83'
        b'\xcd\xa9\xf9\xb9\xbf\xd7\xfd\xcc\xa6\x1b\x37\xc0'
        b'\xee\xce\x43\x54\x26\x18\x4b\x51\x88\x8f\xc6\xc2'
        b'\xdf\x2d\xa8\xc7\x3d\x5d\x22\xab\xef\xb0\x75\xa2'
        b'\x58\xd7\x3a\xe3\x5c\x9e\xe4\x28\xa5\xcc\xfa\xb0'
        b'\xd5\x64\xc2\xbf\xe6\xd0\x11\xe1\x43\x80\xcc\xdf'
        b'\x55\xf0\x49\x9b\x2f\x77\x20\x4a\x93\x29\x86\x98'
        b'\x85\xd3\x73\x60\x4b\x3b\xc0\x77\xd4\x4b\xb1\x16'
        b'\xfe\xf3\x03\xb2\xbd\xd7\x5f\x79\x0a\x18\xac\x9a'
        b'\x16\x5c\xcc\x4f\x6b\x3d\x11\x38\x7e\xb5\x7c\x2c'
        b'\x62\xcd\xc1\xb3\x98\xf2\x59\xee\xc3\x95\xc7\x60'
        b'\xde\xb0\x22\xcf\x81\xf5\x72\xaf\x58\x99\x60\x16'
    )

    pt = b'{}'

    ret = kniopass.KnioPass.decrypt_payload(PASSWORD, reference)
    assert ret['pt'] == pt
    assert ret['version'] == 1

def test_compat_v0():
    reference = (
        b'\x6b\x6e\x69\x6f\x70\x61\x73\x73\x30\x30\x30\x30'
        b'\x30\x30\x30\x31\x2e\x7a\x99\xa2\x48\xfe\x27\xfa'
        b'\x10\x33\x53\xee\x36\x2e\xdd\xbf\x19\x90\xa3\x12'
        b'\xdb\x14\x4b\xdb\x16\x01\x54\x12\xac\x9a\xb3\x68'
        b'\x3c\xcb\x5e\xec\xef\x70\x59\xdb\x09\xd3\x54\x10'
        b'\x60\x2f\x24\x4f\x08\x3a\xfe\x86\xab\xfb\xc8\xe0'
        b'\x0b\x45\x69\xcd\x4d\xe0\xc7\xb1\xb1\xbf\xf8\x18'
        b'\x4c\xdf\x96\x0e\x50\x8b\x9e\x59\xc1\x6c\xae\x60'
        b'\x91\x7b\x4d\x1a\xf7\x0a\xb4\x4f\x5d\x41\xee\x6a'
        b'\x1a\x1a\x59\x90\x91\x6d\xee\xdd\x86\xe8\x30\x7c'
        b'\xe8\xd0\x0e\x02\x5f\x94\x6a\xf1\x7c\xcc\x7d\x62'
        b'\x65\xf6\x12\x01\x4a\x75\xc4\x11\xce\x89\x0d\x31'
        b'\x6b\x9e\x2e\xe8\x79\xbe\xa4\x9f\x1a\xce\x1f\xff'
        b'\xd6\x8a\xcd\xb5\xf8\xfc\x5f\x6c\x0a\xb9\xcf\x4b'
        b'\xb6\x8f\x72\x7f\x65\xbd\x57\x13\xe8\xc1\x19\xb3'
        b'\xb0\xb1\x5c\xcc\xf5\x38\x0a\xc1\x99\x6a\x90\x17'
        b'\x67\xc1\x11\xb0\x4d\x86\x2a\x1e\x32\x63\xb2\x7b'
        b'\xef\xff\xfc\x12'
    )

    ret = kniopass.KnioPass.decrypt_payload(PASSWORD, reference)
    assert ret['pt'] == b'{}'
